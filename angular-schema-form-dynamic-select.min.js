!function(e,t){"function"==typeof define&&define.amd?define(["angular-schema-form"],t):"object"==typeof exports?module.exports=t(require("angular-schema-form")):e.angularSchemaFormDynamicSelect=t(e.schemaForm)}(this,function(e){function t(e,t){for(i=0;i<t.length;i++)if(t[i].value==e)return t[i]}return angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/strap/strapmultiselect.html",'<div ng-controller="dynamicSelectController" class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)"><button type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" data-multiple="1" data-placement="{{form.options.placement || \'bottom-left\'}}" data-max-length="{{form.options.inlineMaxLength}}" data-max-length-html="{{form.options.inlineMaxLengthHtml}}" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button> <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span></div></div>'),e.put("directives/decorators/bootstrap/strap/strapselect.html",'<div ng-controller="dynamicSelectController" class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)"><button ng-if="(form.options.multiple == \'true\') || (form.options.multiple == true)" type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" data-multiple="1" data-max-length="{{form.options.inlineMaxLength}}" data-placement="{{form.options.placement || \'bottom-left\'}}" data-max-length-html="{{form.options.inlineMaxLengthHtml}}" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button> <button ng-if="!((form.options.multiple == \'true\') || (form.options.multiple == true))" type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" data-placement="{{form.options.placement || \'bottom-left\'}}" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button> <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span></div></div>'),e.put("directives/decorators/bootstrap/strap/uiselect.html",'<div ng-controller="dynamicSelectController" ng-class="{ \'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false }" class="form-group"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group"><ui-select ng-if="!(form.options.tagging||false)" ng-model="form.$$selectedObject" ng-disabled="form.disabled" theme="bootstrap" class="{{form.options.uiClass}}"><ui-select-match allow-clear="{{form.options.allowClear||false}}" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{form.$$selectedObject.name}}</ui-select-match><ui-select-choices refresh="populateTitleMap(form, $select.search)" refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy" repeat="item in form.titleMap | propsFilter: { name: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') } track by $index"><div ng-bind-html="item.name | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices></ui-select><ui-select ng-if="(form.options.tagging||false)" ng-model="form.$$selectedObject" ng-disabled="form.disabled" tagging="(getTaggingFn(form.options.tagging))" tagging-label="{{form.options.taggingLabel||\'(new)\'}}" tagging-tokens="{{form.options.taggingTokens}}||;|," theme="bootstrap" class="{{form.options.uiClass}}"><ui-select-match allow-clear="{{form.options.allowClear||false}}" placeholder="{{ form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{form.$$selectedObject.name||form.$$selectedObject.value}}&nbsp; <small ng-if="form.$$selectedObject.isTag">{{($select.taggingLabel)}}</small></ui-select-match><ui-select-choices group-by="form.options.groupBy" refresh="populateTitleMap(form, $select.search)" refresh-delay="form.options.refreshDelay" repeat="item in form.titleMap | propsFilter: { name: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\' ) } track by $index"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.name | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div>\' + \'<div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.name + item.isTag| highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices></ui-select><input type="hidden" name="{{form.key.slice(-1)[0]}}" toggle-single-model="" ng-model="$$value$$" form="form" sf-changed="form" schema-validate="form"> <span ng-if="form.feedback !== false" ng-class="evalInScope(form.feedback) || { \'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }" class="form-control-feedback" id="{{form.key.slice(-1)[0] + \'Status\'}}"></span><div class="help-block" sf-message="form.description"></div></div></div>'),e.put("directives/decorators/bootstrap/strap/uiselectmultiple.html",'<div ng-controller="dynamicSelectController" ng-class="{ \'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false }" class="form-group"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group"><ui-select multiple="" sortable-options="{{form.sortableOptions}}" ng-model="form.$$selectedObjects" theme="bootstrap" on-select="form.$$selectedValues.push($item.value)" on-remove="form.$$selectedValues.splice(form.$$selectedValues.indexOf($item.value), 1)" class="{{form.options.uiClass}}"><ui-select-match placeholder="{{ form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.name}}</ui-select-match><ui-select-choices refresh="populateTitleMap(form, $select.search)" refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy" repeat="item in form.titleMap | propsFilter: { name: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') } track by $index"><div ng-bind-html="item.name | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices></ui-select><input type="hidden" name="{{form.key.slice(-1)[0]}}" toggle-multiple-model="" ng-model="$$value$$" form="form" sf-changed="form" schema-validate="form"> <span ng-if="form.feedback !== false" ng-class="evalInScope(form.feedback) || { \'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }" class="form-control-feedback"></span><div class="help-block" sf-message="form.description"></div></div></div>')}]),angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/strap/strapmultiselect.html",'<div ng-controller="dynamicSelectController" class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)"><button type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" data-multiple="1" data-placement="{{form.options.placement || \'bottom-left\'}}" data-max-length="{{form.options.inlineMaxLength}}" data-max-length-html="{{form.options.inlineMaxLengthHtml}}" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button> <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span></div></div>'),e.put("directives/decorators/bootstrap/strap/strapselect.html",'<div ng-controller="dynamicSelectController" class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}"><label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label><div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)"><button ng-if="(form.options.multiple == \'true\') || (form.options.multiple == true)" type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" data-multiple="1" data-max-length="{{form.options.inlineMaxLength}}" data-placement="{{form.options.placement || \'bottom-left\'}}" data-max-length-html="{{form.options.inlineMaxLengthHtml}}" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button> <button ng-if="!((form.options.multiple == \'true\') || (form.options.multiple == true))" type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$" data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}" data-html="1" data-placement="{{form.options.placement || \'bottom-left\'}}" bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;" bs-select=""></button> <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span></div></div>')}]),angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/uiselect/uiselect.html",'<div ng-controller="dynamicSelectController" ng-class="{ \'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false }" class="form-group"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group"><ui-select ng-if="!(form.options.tagging||false)" ng-model="form.$$selectedObject" ng-disabled="form.disabled" theme="bootstrap" class="{{form.options.uiClass}}"><ui-select-match allow-clear="{{form.options.allowClear||false}}" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{form.$$selectedObject.name}}</ui-select-match><ui-select-choices refresh="populateTitleMap(form, $select.search)" refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy" repeat="item in form.titleMap | propsFilter: { name: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') } track by $index"><div ng-bind-html="item.name | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices></ui-select><ui-select ng-if="(form.options.tagging||false)" ng-model="form.$$selectedObject" ng-disabled="form.disabled" tagging="(getTaggingFn(form.options.tagging))" tagging-label="{{form.options.taggingLabel||\'(new)\'}}" tagging-tokens="{{form.options.taggingTokens}}||;|," theme="bootstrap" class="{{form.options.uiClass}}"><ui-select-match allow-clear="{{form.options.allowClear||false}}" placeholder="{{ form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{form.$$selectedObject.name||form.$$selectedObject.value}}&nbsp; <small ng-if="form.$$selectedObject.isTag">{{($select.taggingLabel)}}</small></ui-select-match><ui-select-choices group-by="form.options.groupBy" refresh="populateTitleMap(form, $select.search)" refresh-delay="form.options.refreshDelay" repeat="item in form.titleMap | propsFilter: { name: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\' ) } track by $index"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.name | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div>\' + \'<div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.name + item.isTag| highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices></ui-select><input type="hidden" name="{{form.key.slice(-1)[0]}}" toggle-single-model="" ng-model="$$value$$" form="form" sf-changed="form" schema-validate="form"> <span ng-if="form.feedback !== false" ng-class="evalInScope(form.feedback) || { \'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }" class="form-control-feedback" id="{{form.key.slice(-1)[0] + \'Status\'}}"></span><div class="help-block" sf-message="form.description"></div></div></div>'),e.put("directives/decorators/bootstrap/uiselect/uiselectmultiple.html",'<div ng-controller="dynamicSelectController" ng-class="{ \'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false }" class="form-group"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group"><ui-select multiple="" sortable-options="{{form.sortableOptions}}" ng-model="form.$$selectedObjects" theme="bootstrap" on-select="form.$$selectedValues.push($item.value)" on-remove="form.$$selectedValues.splice(form.$$selectedValues.indexOf($item.value), 1)" class="{{form.options.uiClass}}"><ui-select-match placeholder="{{ form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.name}}</ui-select-match><ui-select-choices refresh="populateTitleMap(form, $select.search)" refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy" repeat="item in form.titleMap | propsFilter: { name: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') } track by $index"><div ng-bind-html="item.name | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices></ui-select><input type="hidden" name="{{form.key.slice(-1)[0]}}" toggle-multiple-model="" ng-model="$$value$$" form="form" sf-changed="form" schema-validate="form"> <span ng-if="form.feedback !== false" ng-class="evalInScope(form.feedback) || { \'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }" class="form-control-feedback"></span><div class="help-block" sf-message="form.description"></div></div></div>')}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,t,o){var l=function(t,l,a){if("string"===l.type&&"enum"in l){var s=e.stdFormObj(t,l,a);return s.key=a.path,s.type="strapselect",a.lookup[o.stringify(a.path)]=s,s}};e.defaults.string.unshift(l),t.addMapping("bootstrapDecorator","strapselect","directives/decorators/bootstrap/strap/strapselect.html"),t.addMapping("bootstrapDecorator","strapmultiselect","directives/decorators/bootstrap/strap/strapmultiselect.html"),t.addMapping("bootstrapDecorator","strapselectdynamic","directives/decorators/bootstrap/strap/strapselect.html"),t.addMapping("bootstrapDecorator","strapmultiselectdynamic","directives/decorators/bootstrap/strap/strapmultiselect.html"),t.addMapping("bootstrapDecorator","uiselect","directives/decorators/bootstrap/uiselect/uiselect.html"),t.addMapping("bootstrapDecorator","uiselectmultiple","directives/decorators/bootstrap/uiselect/uiselectmultiple.html")}]).directive("toggleSingleModel",function(){return{require:"ngModel",restrict:"A",scope:{ngModel:"=",form:"="},link:function(e,o,l,a){var s=e.$watch("ngModel",function(o){o&&(e.form.$$selectedValue=o,e.form.titleMap&&(e.form.$$selectedObject=t(o,e.form.titleMap)),s())});e.$watch("form.$$selectedObject",function(e,t,o){e!=t&&(o.ngModel=e?e.value:"",o.form.$$selectedValue=o.ngModel,a.$setViewValue(o.ngModel))},!0)}}}).directive("toggleMultipleModel",function(){return{require:"ngModel",restrict:"A",scope:{ngModel:"=",form:"="},link:function(e,o,l,a){var s=e.$watch("ngModel",function(o){o?(e.form.$$selectedValues=o,e.form.titleMap&&o.forEach(function(o){e.form.$$selectedObjects.push(t(o,e.form.titleMap))}),s()):(e.form.$$selectedValues=[],e.form.$$selectedObjects=[])});e.$watch("form.$$selectedValues",function(e,t,o){e!=t&&(o.ngModel=e?e:[],o.form.$$selectedValues=o.ngModel,a.$setViewValue(o.ngModel))},!0)}}}).filter("propsFilter",function(){return function(e,t){var o=[];return angular.isArray(e)?e.forEach(function(e){for(var l=!1,a=Object.keys(t),s=0;s<a.length;s++){var r=a[s];if(e.hasOwnProperty(r)){var i=t[r].toLowerCase();if(0===e[r].toString().toLowerCase().indexOf(i)||-1!==e[r].toString().toLowerCase().indexOf(" "+i)){l=!0;break}}}l&&o.push(e)}):o=e,o}}),angular.module("schemaForm").controller("dynamicSelectController",["$scope","$http","$timeout",function(e,o,l){e.form.options||(e.form.options={}),console.log("Setting options."+e.form.options.toString()),e.getTaggingFn=function(t){return t?"function"==typeof t||"string"==typeof t?t:e.defaultSingleTaggingFn:!1},e.defaultSingleTaggingFn=function(t){var o={name:t.name||t,value:t.value||t,isTag:!0},l=!1;for(i=0;i<e.form.titleMap.length;i++)if(1==e.form.titleMap[i].isTag){e.form.titleMap[i]=o,l=!0;break}return l||e.form.titleMap.unshift(o),o},e.triggerTitleMap=function(){console.log("listener triggered"),e.form.titleMap.push({value:"345890u340598u3405u9",name:"34095u3p4ouij"}),l(function(){e.form.titleMap.pop()})},e.initFiltering=function(t){e.form.options.filterTriggers&&e.form.options.filterTriggers.forEach(function(t){e.$parent.$watch(t,e.triggerTitleMap)}),e.localModelType=Object.prototype.toString.call(t),e.filteringInitialized=!0},e.finalizeTitleMap=function(o,l,a){if(o.titleMap=[],a&&"map"in a&&a.map){var s=a.map.nameProperty.length-1,r=a.map.separatorValue?a.map.separatorValue:" - ";l.forEach(function(e){if(e.value=e[a.map.valueProperty],"string"!=typeof a.map.nameProperty){var t="";for(var l in a.map.nameProperty)t+=e[a.map.nameProperty[l]],l!=s&&(t+=r);e.name=t}else e.name=e[a.map.nameProperty];o.titleMap.push(e)})}else l.forEach(function(e){"text"in e&&(e.name=e.text)}),o.titleMap=l;e.form.$$selectedValue&&void 0===e.form.$$selectedObject&&(e.form.$$selectedObject=t(e.form.$$selectedValue,o.titleMap)),0===e.form.$$selectedValues.length||void 0!=e.form.$$selectedObjects&&0!==e.form.$$selectedObjects.length||(e.form.$$selectedObjects=[],e.form.$$selectedValues.forEach(function(l){e.form.$$selectedObjects.push(t(l,o.titleMap))}))},e.clone=function(t){if(null==t||"object"!=typeof t)return t;var o=t.constructor();for(var l in t)t[l]!=e&&t.hasOwnProperty(l)&&(o[l]=e.clone(t[l]));return o},e.getCallback=function(t){if("string"==typeof t){var o=e.$parent.evalExpr(t);if("function"==typeof o)return o;throw"A callback string must match name of a function in the parent scope"}if("function"==typeof t)return t;throw"A callback must either be a string matching the name of a function in the parent scope or a direct function reference"},e.getOptions=function(t,o){return t.httpPost&&t.httpPost.optionsCallback?(newOptionInstance=e.clone(t),e.getCallback(t.httpPost.optionsCallback)(newOptionInstance,o)):t.httpGet&&t.httpGet.optionsCallback?(newOptionInstance=e.clone(t),e.getCallback(t.httpGet.optionsCallback)(newOptionInstance,o)):t},e.test=function(e){e.titleMap.pop()},e.populateTitleMap=function(t,l){if(t.schema&&"enum"in t.schema)t.titleMap=[],t.schema["enum"].forEach(function(e){t.titleMap.push({value:e,name:e})});else if(t.options)if(t.options.callback)t.titleMap=e.getCallback(t.options.callback)(t.options,l),e.finalizeTitleMap(t,t.titleMap,t.options),console.log("callback items: ",t.titleMap);else{if(t.options.asyncCallback)return e.getCallback(t.options.asyncCallback)(t.options,l).then(function(o){o=o.data||o,e.finalizeTitleMap(t,o,t.options),console.log("asyncCallback items",t.titleMap)},function(e,o){alert("Loading select items failed(Options: '"+String(t.options)+"\nError: "+o)});if(t.options.httpPost){var a=e.getOptions(t.options,l);return o.post(a.httpPost.url,a.httpPost.parameter).then(function(o){e.finalizeTitleMap(t,o.data,a),console.log("httpPost items",t.titleMap)},function(e,t){alert("Loading select items failed (URL: '"+String(a.httpPost.url)+"' Parameter: "+String(a.httpPost.parameter)+"\nError: "+t)})}if(t.options.httpGet){var a=e.getOptions(t.options,l);return o.get(a.httpGet.url,a.httpGet.parameter).then(function(o){e.finalizeTitleMap(t,o.data,a),console.log("httpGet items",t.titleMap)},function(e,t){alert("Loading select items failed (URL: '"+String(a.httpGet.url)+"\nError: "+t)})}}else console.log("dynamicSelectController.populateTitleMap(key:"+t.key+") : No options set, needed for dynamic selects")},e.uiMultiSelectInitInternalModel=function(t){console.log("$scope.externalModel: Key: "+e.form.key.toString()+" Model: "+t.toString()),e.externalModel=t,e.internalModel=[],e.form.titleMap&&void 0!==t&&angular.isArray(t)&&t.forEach(function(t){e.internalModel.push(e.find_in_titleMap(t))})}}]),angular.module("schemaForm").filter("selectFilter",[function(e){return function(e,t,o,l){if(!angular.isDefined(e)||!angular.isDefined(t.form.options)||!angular.isDefined(t.form.options.filter)||""==t.form.options.filter)return e;console.log("----- In filtering for "+t.form.key+"("+t.form.title+"), model value: "+JSON.stringify(o)+"----"),console.log("Filter:"+t.form.options.filter),t.filteringInitialized||(console.log("Initialize filter"),t.initFiltering(o));var a=[];return angular.forEach(e,function(e){t.$eval(t.form.options.filter,{item:e})?a.push(e):o&&("[object Array]"==t.localModelType&&o.indexOf(e.value)>-1?o.splice(o.indexOf(e.value),1):o==e.value&&(console.log("Setting model of type "+t.localModelType+"to null."),o=null))}),"[object Array]"!=t.localModelType||o||(console.log("Resetting model of type "+t.localModelType+" to []."),t.$eval(l+"=[]")),console.log("----- Exiting filter for "+t.form.title+"-----"),a}}]),angularSchemaFormDynamicSelect});